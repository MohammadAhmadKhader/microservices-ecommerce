// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v6.30.0
// source: orders.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "api";

export enum Status {
  UNKNOWN = 0,
  Pending = 1,
  Cancelled = 2,
  Completed = 3,
  UNRECOGNIZED = -1,
}

export function statusFromJSON(object: any): Status {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Status.UNKNOWN;
    case 1:
    case "Pending":
      return Status.Pending;
    case 2:
    case "Cancelled":
      return Status.Cancelled;
    case 3:
    case "Completed":
      return Status.Completed;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Status.UNRECOGNIZED;
  }
}

export function statusToJSON(object: Status): string {
  switch (object) {
    case Status.UNKNOWN:
      return "UNKNOWN";
    case Status.Pending:
      return "Pending";
    case Status.Cancelled:
      return "Cancelled";
    case Status.Completed:
      return "Completed";
    case Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Order {
  ID: number;
  UserId: number;
  Status: Status;
  Items: Item[];
  TotalPrice: number;
}

export interface Item {
  ID: number;
  Quantity: number;
  UnitPrice: number;
}

export interface CreateOrderRequest {
  UserId: number;
  Items: Item[];
}

export interface CreateOrderResponse {
  Order: Order | undefined;
}

export interface GetOrderByIdRequest {
  ID: number;
}

export interface GetOrderByIdResponse {
  Order: Order | undefined;
}

export interface GetOrdersRequest {
  Page: number;
  Limit: number;
}

export interface GetOrdersResponse {
  Page: number;
  Limit: number;
  Count: number;
  Orders: Order[];
}

export interface UpdateOrderStatusRequest {
  Id: number;
  Status: Status;
}

export interface UpdateOrderStatusResponse {
  Order: Order | undefined;
}

function createBaseOrder(): Order {
  return { ID: 0, UserId: 0, Status: 0, Items: [], TotalPrice: 0 };
}

export const Order: MessageFns<Order> = {
  encode(message: Order, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ID !== 0) {
      writer.uint32(8).int32(message.ID);
    }
    if (message.UserId !== 0) {
      writer.uint32(16).int32(message.UserId);
    }
    if (message.Status !== 0) {
      writer.uint32(24).int32(message.Status);
    }
    for (const v of message.Items) {
      Item.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.TotalPrice !== 0) {
      writer.uint32(45).float(message.TotalPrice);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Order {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ID = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.UserId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.Status = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.Items.push(Item.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.TotalPrice = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Order {
    return {
      ID: isSet(object.ID) ? globalThis.Number(object.ID) : 0,
      UserId: isSet(object.UserId) ? globalThis.Number(object.UserId) : 0,
      Status: isSet(object.Status) ? statusFromJSON(object.Status) : 0,
      Items: globalThis.Array.isArray(object?.Items) ? object.Items.map((e: any) => Item.fromJSON(e)) : [],
      TotalPrice: isSet(object.TotalPrice) ? globalThis.Number(object.TotalPrice) : 0,
    };
  },

  toJSON(message: Order): unknown {
    const obj: any = {};
    if (message.ID !== 0) {
      obj.ID = Math.round(message.ID);
    }
    if (message.UserId !== 0) {
      obj.UserId = Math.round(message.UserId);
    }
    if (message.Status !== 0) {
      obj.Status = statusToJSON(message.Status);
    }
    if (message.Items?.length) {
      obj.Items = message.Items.map((e) => Item.toJSON(e));
    }
    if (message.TotalPrice !== 0) {
      obj.TotalPrice = message.TotalPrice;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Order>, I>>(base?: I): Order {
    return Order.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Order>, I>>(object: I): Order {
    const message = createBaseOrder();
    message.ID = object.ID ?? 0;
    message.UserId = object.UserId ?? 0;
    message.Status = object.Status ?? 0;
    message.Items = object.Items?.map((e) => Item.fromPartial(e)) || [];
    message.TotalPrice = object.TotalPrice ?? 0;
    return message;
  },
};

function createBaseItem(): Item {
  return { ID: 0, Quantity: 0, UnitPrice: 0 };
}

export const Item: MessageFns<Item> = {
  encode(message: Item, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ID !== 0) {
      writer.uint32(8).int32(message.ID);
    }
    if (message.Quantity !== 0) {
      writer.uint32(16).int32(message.Quantity);
    }
    if (message.UnitPrice !== 0) {
      writer.uint32(29).float(message.UnitPrice);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Item {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ID = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.Quantity = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.UnitPrice = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Item {
    return {
      ID: isSet(object.ID) ? globalThis.Number(object.ID) : 0,
      Quantity: isSet(object.Quantity) ? globalThis.Number(object.Quantity) : 0,
      UnitPrice: isSet(object.UnitPrice) ? globalThis.Number(object.UnitPrice) : 0,
    };
  },

  toJSON(message: Item): unknown {
    const obj: any = {};
    if (message.ID !== 0) {
      obj.ID = Math.round(message.ID);
    }
    if (message.Quantity !== 0) {
      obj.Quantity = Math.round(message.Quantity);
    }
    if (message.UnitPrice !== 0) {
      obj.UnitPrice = message.UnitPrice;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Item>, I>>(base?: I): Item {
    return Item.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Item>, I>>(object: I): Item {
    const message = createBaseItem();
    message.ID = object.ID ?? 0;
    message.Quantity = object.Quantity ?? 0;
    message.UnitPrice = object.UnitPrice ?? 0;
    return message;
  },
};

function createBaseCreateOrderRequest(): CreateOrderRequest {
  return { UserId: 0, Items: [] };
}

export const CreateOrderRequest: MessageFns<CreateOrderRequest> = {
  encode(message: CreateOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.UserId !== 0) {
      writer.uint32(8).int32(message.UserId);
    }
    for (const v of message.Items) {
      Item.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.UserId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.Items.push(Item.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderRequest {
    return {
      UserId: isSet(object.UserId) ? globalThis.Number(object.UserId) : 0,
      Items: globalThis.Array.isArray(object?.Items) ? object.Items.map((e: any) => Item.fromJSON(e)) : [],
    };
  },

  toJSON(message: CreateOrderRequest): unknown {
    const obj: any = {};
    if (message.UserId !== 0) {
      obj.UserId = Math.round(message.UserId);
    }
    if (message.Items?.length) {
      obj.Items = message.Items.map((e) => Item.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrderRequest>, I>>(base?: I): CreateOrderRequest {
    return CreateOrderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrderRequest>, I>>(object: I): CreateOrderRequest {
    const message = createBaseCreateOrderRequest();
    message.UserId = object.UserId ?? 0;
    message.Items = object.Items?.map((e) => Item.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateOrderResponse(): CreateOrderResponse {
  return { Order: undefined };
}

export const CreateOrderResponse: MessageFns<CreateOrderResponse> = {
  encode(message: CreateOrderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Order !== undefined) {
      Order.encode(message.Order, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOrderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Order = Order.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderResponse {
    return { Order: isSet(object.Order) ? Order.fromJSON(object.Order) : undefined };
  },

  toJSON(message: CreateOrderResponse): unknown {
    const obj: any = {};
    if (message.Order !== undefined) {
      obj.Order = Order.toJSON(message.Order);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrderResponse>, I>>(base?: I): CreateOrderResponse {
    return CreateOrderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrderResponse>, I>>(object: I): CreateOrderResponse {
    const message = createBaseCreateOrderResponse();
    message.Order = (object.Order !== undefined && object.Order !== null) ? Order.fromPartial(object.Order) : undefined;
    return message;
  },
};

function createBaseGetOrderByIdRequest(): GetOrderByIdRequest {
  return { ID: 0 };
}

export const GetOrderByIdRequest: MessageFns<GetOrderByIdRequest> = {
  encode(message: GetOrderByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ID !== 0) {
      writer.uint32(8).int32(message.ID);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrderByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrderByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ID = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrderByIdRequest {
    return { ID: isSet(object.ID) ? globalThis.Number(object.ID) : 0 };
  },

  toJSON(message: GetOrderByIdRequest): unknown {
    const obj: any = {};
    if (message.ID !== 0) {
      obj.ID = Math.round(message.ID);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrderByIdRequest>, I>>(base?: I): GetOrderByIdRequest {
    return GetOrderByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrderByIdRequest>, I>>(object: I): GetOrderByIdRequest {
    const message = createBaseGetOrderByIdRequest();
    message.ID = object.ID ?? 0;
    return message;
  },
};

function createBaseGetOrderByIdResponse(): GetOrderByIdResponse {
  return { Order: undefined };
}

export const GetOrderByIdResponse: MessageFns<GetOrderByIdResponse> = {
  encode(message: GetOrderByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Order !== undefined) {
      Order.encode(message.Order, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrderByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrderByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Order = Order.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrderByIdResponse {
    return { Order: isSet(object.Order) ? Order.fromJSON(object.Order) : undefined };
  },

  toJSON(message: GetOrderByIdResponse): unknown {
    const obj: any = {};
    if (message.Order !== undefined) {
      obj.Order = Order.toJSON(message.Order);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrderByIdResponse>, I>>(base?: I): GetOrderByIdResponse {
    return GetOrderByIdResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrderByIdResponse>, I>>(object: I): GetOrderByIdResponse {
    const message = createBaseGetOrderByIdResponse();
    message.Order = (object.Order !== undefined && object.Order !== null) ? Order.fromPartial(object.Order) : undefined;
    return message;
  },
};

function createBaseGetOrdersRequest(): GetOrdersRequest {
  return { Page: 0, Limit: 0 };
}

export const GetOrdersRequest: MessageFns<GetOrdersRequest> = {
  encode(message: GetOrdersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Page !== 0) {
      writer.uint32(8).int32(message.Page);
    }
    if (message.Limit !== 0) {
      writer.uint32(16).int32(message.Limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrdersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrdersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.Page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.Limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrdersRequest {
    return {
      Page: isSet(object.Page) ? globalThis.Number(object.Page) : 0,
      Limit: isSet(object.Limit) ? globalThis.Number(object.Limit) : 0,
    };
  },

  toJSON(message: GetOrdersRequest): unknown {
    const obj: any = {};
    if (message.Page !== 0) {
      obj.Page = Math.round(message.Page);
    }
    if (message.Limit !== 0) {
      obj.Limit = Math.round(message.Limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrdersRequest>, I>>(base?: I): GetOrdersRequest {
    return GetOrdersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrdersRequest>, I>>(object: I): GetOrdersRequest {
    const message = createBaseGetOrdersRequest();
    message.Page = object.Page ?? 0;
    message.Limit = object.Limit ?? 0;
    return message;
  },
};

function createBaseGetOrdersResponse(): GetOrdersResponse {
  return { Page: 0, Limit: 0, Count: 0, Orders: [] };
}

export const GetOrdersResponse: MessageFns<GetOrdersResponse> = {
  encode(message: GetOrdersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Page !== 0) {
      writer.uint32(8).int32(message.Page);
    }
    if (message.Limit !== 0) {
      writer.uint32(16).int32(message.Limit);
    }
    if (message.Count !== 0) {
      writer.uint32(24).int32(message.Count);
    }
    for (const v of message.Orders) {
      Order.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrdersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrdersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.Page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.Limit = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.Count = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.Orders.push(Order.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrdersResponse {
    return {
      Page: isSet(object.Page) ? globalThis.Number(object.Page) : 0,
      Limit: isSet(object.Limit) ? globalThis.Number(object.Limit) : 0,
      Count: isSet(object.Count) ? globalThis.Number(object.Count) : 0,
      Orders: globalThis.Array.isArray(object?.Orders) ? object.Orders.map((e: any) => Order.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetOrdersResponse): unknown {
    const obj: any = {};
    if (message.Page !== 0) {
      obj.Page = Math.round(message.Page);
    }
    if (message.Limit !== 0) {
      obj.Limit = Math.round(message.Limit);
    }
    if (message.Count !== 0) {
      obj.Count = Math.round(message.Count);
    }
    if (message.Orders?.length) {
      obj.Orders = message.Orders.map((e) => Order.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrdersResponse>, I>>(base?: I): GetOrdersResponse {
    return GetOrdersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrdersResponse>, I>>(object: I): GetOrdersResponse {
    const message = createBaseGetOrdersResponse();
    message.Page = object.Page ?? 0;
    message.Limit = object.Limit ?? 0;
    message.Count = object.Count ?? 0;
    message.Orders = object.Orders?.map((e) => Order.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateOrderStatusRequest(): UpdateOrderStatusRequest {
  return { Id: 0, Status: 0 };
}

export const UpdateOrderStatusRequest: MessageFns<UpdateOrderStatusRequest> = {
  encode(message: UpdateOrderStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Id !== 0) {
      writer.uint32(8).int32(message.Id);
    }
    if (message.Status !== 0) {
      writer.uint32(16).int32(message.Status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateOrderStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrderStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.Id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.Status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrderStatusRequest {
    return {
      Id: isSet(object.Id) ? globalThis.Number(object.Id) : 0,
      Status: isSet(object.Status) ? statusFromJSON(object.Status) : 0,
    };
  },

  toJSON(message: UpdateOrderStatusRequest): unknown {
    const obj: any = {};
    if (message.Id !== 0) {
      obj.Id = Math.round(message.Id);
    }
    if (message.Status !== 0) {
      obj.Status = statusToJSON(message.Status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrderStatusRequest>, I>>(base?: I): UpdateOrderStatusRequest {
    return UpdateOrderStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrderStatusRequest>, I>>(object: I): UpdateOrderStatusRequest {
    const message = createBaseUpdateOrderStatusRequest();
    message.Id = object.Id ?? 0;
    message.Status = object.Status ?? 0;
    return message;
  },
};

function createBaseUpdateOrderStatusResponse(): UpdateOrderStatusResponse {
  return { Order: undefined };
}

export const UpdateOrderStatusResponse: MessageFns<UpdateOrderStatusResponse> = {
  encode(message: UpdateOrderStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Order !== undefined) {
      Order.encode(message.Order, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateOrderStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrderStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Order = Order.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrderStatusResponse {
    return { Order: isSet(object.Order) ? Order.fromJSON(object.Order) : undefined };
  },

  toJSON(message: UpdateOrderStatusResponse): unknown {
    const obj: any = {};
    if (message.Order !== undefined) {
      obj.Order = Order.toJSON(message.Order);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrderStatusResponse>, I>>(base?: I): UpdateOrderStatusResponse {
    return UpdateOrderStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrderStatusResponse>, I>>(object: I): UpdateOrderStatusResponse {
    const message = createBaseUpdateOrderStatusResponse();
    message.Order = (object.Order !== undefined && object.Order !== null) ? Order.fromPartial(object.Order) : undefined;
    return message;
  },
};

export interface OrderService {
  GetOrderById(request: GetOrderByIdRequest): Promise<GetOrderByIdResponse>;
  GetOrders(request: GetOrdersRequest): Promise<GetOrdersResponse>;
  CreateOrder(request: CreateOrderRequest): Promise<Order>;
  UpdateOrderStatus(request: UpdateOrderStatusRequest): Promise<UpdateOrderStatusResponse>;
}

export const OrderServiceServiceName = "api.OrderService";
export class OrderServiceClientImpl implements OrderService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || OrderServiceServiceName;
    this.rpc = rpc;
    this.GetOrderById = this.GetOrderById.bind(this);
    this.GetOrders = this.GetOrders.bind(this);
    this.CreateOrder = this.CreateOrder.bind(this);
    this.UpdateOrderStatus = this.UpdateOrderStatus.bind(this);
  }
  GetOrderById(request: GetOrderByIdRequest): Promise<GetOrderByIdResponse> {
    const data = GetOrderByIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOrderById", data);
    return promise.then((data) => GetOrderByIdResponse.decode(new BinaryReader(data)));
  }

  GetOrders(request: GetOrdersRequest): Promise<GetOrdersResponse> {
    const data = GetOrdersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOrders", data);
    return promise.then((data) => GetOrdersResponse.decode(new BinaryReader(data)));
  }

  CreateOrder(request: CreateOrderRequest): Promise<Order> {
    const data = CreateOrderRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateOrder", data);
    return promise.then((data) => Order.decode(new BinaryReader(data)));
  }

  UpdateOrderStatus(request: UpdateOrderStatusRequest): Promise<UpdateOrderStatusResponse> {
    const data = UpdateOrderStatusRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateOrderStatus", data);
    return promise.then((data) => UpdateOrderStatusResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
